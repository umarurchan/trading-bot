import { GalaChainProvider } from "../GalaChainClient";
import { DryRunRequest, DryRunResult, GetObjectByKeyRequest, GetObjectHistoryRequest } from "../types";
/**
 * Base API class providing common chaincode operations.
 * Serves as the foundation for specific API implementations.
 */
export declare class GalaChainBaseApi {
    protected chainCodeUrl: string;
    protected connection: GalaChainProvider;
    /**
     * Creates a new base API instance.
     * @param chainCodeUrl - The URL of the chaincode service
     * @param connection - The GalaChain provider for network communication
     */
    constructor(chainCodeUrl: string, connection: GalaChainProvider);
    /**
     * Performs a dry run of a chaincode operation without committing to the ledger.
     * @param dto - The dry run request parameters
     * @returns Promise resolving to the dry run results
     */
    DryRun(dto: DryRunRequest): Promise<import("../types").GalaChainResponseSuccess<DryRunResult>>;
    /**
     * Retrieves an object from the blockchain by its key.
     * @template T - The expected type of the retrieved object
     * @param dto - The object key request parameters
     * @returns Promise resolving to the retrieved object
     */
    GetObjectByKey<T = Record<string, unknown>>(dto: GetObjectByKeyRequest): Promise<import("../types").GalaChainResponseSuccess<T>>;
    /**
     * Retrieves the history of changes for an object from the blockchain.
     * @template T - The expected type of the historical objects
     * @param dto - The object history request parameters
     * @returns Promise resolving to the object's history
     */
    GetObjectHistory<T = Record<string, unknown>>(dto: GetObjectHistoryRequest): Promise<import("../types").GalaChainResponseSuccess<T>>;
}
//# sourceMappingURL=GalaChainBaseApi.d.ts.map