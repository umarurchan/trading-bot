import { Eip1193Provider } from "ethers";
/**
 * Calculates the personal sign prefix for Ethereum message signing.
 * Iteratively calculates the correct prefix length to account for variable payload sizes.
 * @param payload - The payload object to calculate prefix for
 * @returns The calculated prefix string
 */
export declare function calculatePersonalSignPrefix(payload: object): string;
/**
 * Extended EIP-1193 provider interface with additional wallet-specific properties.
 * Adds support for event handling and wallet detection.
 */
export interface ExtendedEip1193Provider extends Eip1193Provider {
    /** Adds a listener for account change events */
    on(event: "accountsChanged", handler: Listener<string[]>): void;
    /** Removes a listener for account change events */
    removeListener(event: "accountsChanged", handler: Listener<string[]>): void;
    /** Array of available providers (for multi-wallet scenarios) */
    providers?: Array<any>;
    /** Flag indicating if this is a Trust Wallet provider */
    isTrust?: boolean;
}
/**
 * Event types emitted by MetaMask and compatible wallets.
 */
export interface MetaMaskEvents {
    /** Fired when the active account changes */
    accountChanged: string | null;
    /** Fired when the list of accounts changes */
    accountsChanged: string[] | null;
}
/**
 * Generic event listener function type.
 * @template T - The type of data passed to the listener
 */
export type Listener<T> = (data: T) => void;
/**
 * Simple event emitter implementation for handling wallet events.
 * @template Events - Record type defining available events and their data types
 */
export declare class EventEmitter<Events extends Record<string, any>> {
    private listeners;
    /**
     * Adds an event listener for the specified event.
     * @param event - The event name to listen for
     * @param listener - The callback function to execute when the event is emitted
     * @returns This instance for method chaining
     */
    on<K extends keyof Events>(event: K, listener: Listener<Events[K]>): this;
    /**
     * Removes an event listener for the specified event.
     * @param event - The event name to stop listening for
     * @param listener - The callback function to remove
     * @returns This instance for method chaining
     */
    off<K extends keyof Events>(event: K, listener: Listener<Events[K]>): this;
    /**
     * Emits an event to all registered listeners.
     * @param event - The event name to emit
     * @param data - The data to pass to the listeners
     * @returns True if the event had listeners, false otherwise
     */
    emit<K extends keyof Events>(event: K, data: Events[K]): boolean;
}
//# sourceMappingURL=helpers.d.ts.map