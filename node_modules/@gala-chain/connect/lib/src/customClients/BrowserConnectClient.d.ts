import { Eip1193Provider } from "ethers";
import { GalaChainProviderOptions, WebSigner } from "../GalaChainClient";
import { ExtendedEip1193Provider } from "../helpers";
import { SigningType } from "../types";
declare global {
    interface Window {
        ethereum?: ExtendedEip1193Provider;
    }
}
/**
 * Browser-based client for connecting to wallets like MetaMask.
 * Handles wallet connection, account management, and transaction signing.
 */
export declare class BrowserConnectClient extends WebSigner {
    protected isInitialized: boolean;
    /**
     * Creates a new browser connect client.
     * @param provider - Optional EIP-1193 provider (defaults to window.ethereum)
     * @param options - Configuration options for the provider
     * @throws {Error} If no Ethereum provider is found
     */
    constructor(provider?: Eip1193Provider, options?: GalaChainProviderOptions);
    /**
     * Initializes the listeners to watch for events from the provider. Not all providers may support every event
     */
    protected initializeListeners(): void;
    /**
     * Handles account changes from the wallet provider.
     * @param accounts - Array of account addresses from the wallet
     */
    protected onAccountsChanged(accounts: string[]): void;
    /**
     * Connects to the wallet and requests account access.
     * @returns Promise resolving to the connected GalaChain address
     * @throws {Error} If no provider is found or connection fails
     */
    connect(): Promise<string>;
    /**
     * Disconnects from the wallet and cleans up event listeners.
     */
    disconnect(): void;
    /**
     * Signs a payload using the connected wallet.
     * @template T - The type of the payload to sign
     * @param method - The method name for EIP-712 signing
     * @param payload - The data to sign
     * @param signingType - The type of signing to use (defaults to signTypedData)
     * @returns Promise resolving to the signed payload with signature
     * @throws {Error} If no provider/account is connected or signing fails
     */
    sign<T extends object>(method: string, payload: T, signingType?: SigningType): Promise<T & {
        signature: string;
        prefix: string;
    }>;
}
//# sourceMappingURL=BrowserConnectClient.d.ts.map