import { ChainCallDTO, ClassConstructor } from "@gala-chain/api";
import { BrowserProvider } from "ethers";
import { Listener, MetaMaskEvents } from "./helpers";
import { GalaChainResponseSuccess, SigningType } from "./types";
import { ConstructorArgs } from "./types/utils";
/**
 * Type utility that extracts the element type constructor from array types,
 * or returns the constructor for non-array types.
 */
type NonArrayClassConstructor<T> = T extends Array<unknown> ? ClassConstructor<T[number]> : ClassConstructor<T>;
/**
 * Configuration options for GalaChain providers.
 */
export interface GalaChainProviderOptions {
    /** The type of signing to use for transactions */
    signingType?: SigningType;
    /** Legacy authentication credentials for backward compatibility */
    legacyCredentials?: {
        /** Identity lookup key for user identification */
        identityLookupKey: string;
        /** User encryption key for secure operations */
        userEncryptionKey: string;
    };
}
/**
 * Abstract base class for GalaChain providers that handle communication with GalaChain networks.
 * Provides common functionality for signing transactions and submitting requests.
 */
export declare abstract class GalaChainProvider {
    protected options?: GalaChainProviderOptions | undefined;
    private legacyCredentials;
    /**
     * Creates a new GalaChain provider instance.
     * @param options - Configuration options for the provider
     */
    constructor(options?: GalaChainProviderOptions | undefined);
    /**
     * Signs a payload using the provider's signing mechanism.
     * @param method - The method name being called
     * @param dto - The data transfer object to sign
     * @param signingType - Optional signing type override
     * @returns The signed payload with signature and optional prefix
     */
    abstract sign<T extends object>(method: string, dto: T, signingType?: SigningType): Promise<T & {
        signature: string;
        prefix?: string;
    }>;
    /**
     * Submits a request to the GalaChain network.
     * @param params - The submission parameters
     * @param params.url - The base URL for the request
     * @param params.method - The method name to call
     * @param params.payload - The request payload
     * @param params.sign - Whether to sign the request
     * @param params.headers - Additional HTTP headers
     * @param params.requestConstructor - Constructor for request validation
     * @param params.responseConstructor - Constructor for response transformation
     * @param params.signingType - Type of signing to use
     * @returns Promise resolving to a successful response
     * @throws {GalaChainResponseError} When the request fails
     */
    submit<T, U extends object>({ url, method, payload, sign, headers, requestConstructor, responseConstructor, signingType }: {
        url: string;
        method: string;
        payload: ConstructorArgs<U>;
        sign?: boolean;
        headers?: Record<string, string>;
        requestConstructor?: ClassConstructor<ChainCallDTO>;
        responseConstructor?: NonArrayClassConstructor<T>;
        signingType?: SigningType;
    }): Promise<GalaChainResponseSuccess<T>>;
}
/**
 * Abstract custom client that extends GalaChain provider with additional client-specific functionality.
 * Provides methods for public key management and address handling.
 */
export declare abstract class CustomClient extends GalaChainProvider {
    /**
     * Creates a new custom client instance.
     * @param options - Configuration options for the provider
     */
    constructor(options?: GalaChainProviderOptions);
    /**
     * Retrieves the public key and recovered address for the client.
     * @returns Promise resolving to public key and recovered address
     */
    abstract getPublicKey(): Promise<{
        publicKey: string;
        recoveredAddress: string;
    }>;
    /** The Ethereum address associated with this client */
    abstract ethereumAddress: string;
    /** The GalaChain address associated with this client */
    abstract galaChainAddress: string;
    /**
     * Calculates the personal sign prefix for a given payload.
     * This is used for Ethereum personal_sign compatibility.
     * @param payload - The payload to calculate prefix for
     * @returns The calculated prefix string
     */
    calculatePersonalSignPrefix(payload: object): string;
}
/**
 * Abstract web signer that provides browser-based signing capabilities.
 * Handles connection to web wallets and manages Ethereum addresses.
 */
export declare abstract class WebSigner extends CustomClient {
    protected address: string;
    protected provider: BrowserProvider | undefined;
    /**
     * Creates a new web signer instance.
     * @param options - Configuration options for the provider
     */
    constructor(options?: GalaChainProviderOptions);
    /**
     * Connects to the web wallet and returns the connected address.
     * @returns Promise resolving to the connected Ethereum address
     */
    abstract connect(): Promise<string>;
    /**
     * Sets the Ethereum address, converting from GalaChain format if needed.
     * @param val - The address to set
     */
    set ethereumAddress(val: string);
    /**
     * Gets the current Ethereum address.
     * @returns The Ethereum address
     */
    get ethereumAddress(): string;
    /**
     * Gets the GalaChain address derived from the Ethereum address.
     * @returns The GalaChain address
     */
    get galaChainAddress(): string;
    private eventEmitter;
    /**
     * Adds an event listener for MetaMask events.
     * @param event - The event type to listen for
     * @param listener - The callback function to execute
     * @returns This instance for method chaining
     */
    on(event: keyof MetaMaskEvents, listener: Listener<string | string[] | null>): this;
    /**
     * Removes an event listener for MetaMask events.
     * @param event - The event type to stop listening for
     * @param listener - The callback function to remove
     * @returns This instance for method chaining
     */
    off(event: keyof MetaMaskEvents, listener: Listener<string | string[] | null>): this;
    /**
     * Emits a MetaMask event to all registered listeners.
     * @param event - The event type to emit
     * @param data - The data to pass to listeners
     * @returns True if the event had listeners, false otherwise
     */
    emit(event: keyof MetaMaskEvents, data: string[] | string | null): boolean;
    /**
     * Retrieves the public key by signing a message and recovering it from the signature.
     * @returns Promise resolving to the public key and recovered address
     */
    getPublicKey(): Promise<{
        publicKey: string;
        recoveredAddress: string;
    }>;
    /**
     * Signs a message using the connected wallet.
     * @param message - The message to sign
     * @returns Promise resolving to the signature
     * @throws {Error} If no provider is found or no account is connected
     */
    signMessage(message: string): Promise<string>;
}
export {};
//# sourceMappingURL=GalaChainClient.d.ts.map