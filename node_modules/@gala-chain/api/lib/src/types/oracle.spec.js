"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const class_transformer_1 = require("class-transformer");
const OraclePriceAssertion_1 = require("./OraclePriceAssertion");
const TokenInstance_1 = require("./TokenInstance");
const dtos_1 = require("./dtos");
const oracle_1 = require("./oracle");
describe("oracle.ts", () => {
    const mockOracle = "mock-oracle";
    const mockOracleIdentity = "client|mock-oracle";
    const galaTokenInstanceKey = (0, class_transformer_1.plainToInstance)(TokenInstance_1.TokenInstanceKey, {
        collection: "GALA",
        category: "Unit",
        type: "none",
        additionalKey: "none"
    });
    const usdDetails = (0, class_transformer_1.plainToInstance)(OraclePriceAssertion_1.ExternalToken, {
        name: "USD",
        symbol: "usd"
    });
    const tonDetails = (0, class_transformer_1.plainToInstance)(OraclePriceAssertion_1.ExternalToken, {
        name: "Toncoin",
        symbol: "ton"
    });
    test("cross rate calculations", async () => {
        const mockTonUsdQuote = {
            "the-open-network": {
                usd: 5.5
            }
        };
        const mockGalaUsdQuote = {
            gala: {
                usd: 0.025
            }
        };
        const tonUsdPriceAssertion = await (0, dtos_1.createValidSubmitDTO)(oracle_1.OraclePriceAssertionDto, {
            oracle: mockOracle,
            identity: mockOracleIdentity,
            externalBaseToken: tonDetails,
            externalQuoteToken: usdDetails,
            exchangeRate: new bignumber_js_1.default(mockTonUsdQuote["the-open-network"].usd),
            timestamp: 0
        });
        const galaUsdPriceAssertion = await (0, dtos_1.createValidSubmitDTO)(oracle_1.OraclePriceAssertionDto, {
            oracle: mockOracle,
            identity: mockOracleIdentity,
            baseToken: galaTokenInstanceKey,
            externalQuoteToken: usdDetails,
            exchangeRate: new bignumber_js_1.default(mockGalaUsdQuote.gala.usd),
            timestamp: 0
        });
        const mockAssertionDto = await (0, dtos_1.createValidSubmitDTO)(oracle_1.OraclePriceCrossRateAssertionDto, {
            oracle: mockOracle,
            identity: mockOracleIdentity,
            baseTokenCrossRate: tonUsdPriceAssertion,
            quoteTokenCrossRate: galaUsdPriceAssertion,
            externalCrossRateToken: usdDetails,
            crossRate: new bignumber_js_1.default("220")
        });
        const voidResult = mockAssertionDto.validateCrossRate();
        expect(voidResult).toBeUndefined();
        mockAssertionDto.crossRate = new bignumber_js_1.default("42");
        expect(mockAssertionDto.validateCrossRate).toThrow();
    });
});
//# sourceMappingURL=oracle.spec.js.map