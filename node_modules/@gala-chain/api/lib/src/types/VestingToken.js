"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateVestingTokenDto = exports.FetchVestingTokenDto = exports.VestingTokenInfo = exports.VestingToken = exports.Allocation = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const class_validator_jsonschema_1 = require("class-validator-jsonschema");
const utils_1 = require("../utils");
const validators_1 = require("../validators");
const ChainObject_1 = require("./ChainObject");
const TokenBalance_1 = require("./TokenBalance");
const TokenClass_1 = require("./TokenClass");
const dtos_1 = require("./dtos");
const token_1 = require("./token");
class Allocation {
}
exports.Allocation = Allocation;
tslib_1.__decorate([
    (0, class_validator_1.IsString)(),
    tslib_1.__metadata("design:type", String)
], Allocation.prototype, "name", void 0);
tslib_1.__decorate([
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], Allocation.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, validators_1.BigNumberIsNotNegative)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], Allocation.prototype, "quantity", void 0);
tslib_1.__decorate([
    (0, class_validator_1.Min)(0),
    (0, class_validator_1.IsInt)(),
    tslib_1.__metadata("design:type", Number)
], Allocation.prototype, "cliff", void 0);
tslib_1.__decorate([
    (0, class_validator_1.Min)(0),
    (0, class_validator_1.IsInt)(),
    tslib_1.__metadata("design:type", Number)
], Allocation.prototype, "vestingDays", void 0);
class VestingToken extends ChainObject_1.ChainObject {
}
exports.VestingToken = VestingToken;
VestingToken.INDEX_KEY = "GCVT";
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 0 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], VestingToken.prototype, "collection", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 1 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], VestingToken.prototype, "category", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 2 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], VestingToken.prototype, "type", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 3 }),
    (0, class_validator_1.IsDefined)(),
    tslib_1.__metadata("design:type", String)
], VestingToken.prototype, "additionalKey", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsString)(),
    tslib_1.__metadata("design:type", String)
], VestingToken.prototype, "vestingName", void 0);
tslib_1.__decorate([
    (0, class_validator_1.Min)(0),
    (0, class_validator_1.IsInt)(),
    tslib_1.__metadata("design:type", Number)
], VestingToken.prototype, "startDate", void 0);
tslib_1.__decorate([
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_transformer_1.Type)(() => Allocation),
    (0, class_validator_1.ArrayMinSize)(1),
    (0, class_validator_1.ArrayUnique)(),
    tslib_1.__metadata("design:type", Array)
], VestingToken.prototype, "allocations", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], VestingToken, "INDEX_KEY", void 0);
// Combines the base VestingToken data with balances for allocations
class VestingTokenInfo {
}
exports.VestingTokenInfo = VestingTokenInfo;
tslib_1.__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => VestingToken),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", VestingToken)
], VestingTokenInfo.prototype, "vestingToken", void 0);
tslib_1.__decorate([
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_transformer_1.Type)(() => TokenBalance_1.TokenBalance),
    (0, class_validator_1.ArrayNotEmpty)(),
    tslib_1.__metadata("design:type", Array)
], VestingTokenInfo.prototype, "allocationBalances", void 0);
let FetchVestingTokenDto = class FetchVestingTokenDto extends dtos_1.ChainCallDTO {
};
exports.FetchVestingTokenDto = FetchVestingTokenDto;
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "The Vested Token Class to be Fetched."
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => TokenClass_1.TokenClassKey),
    tslib_1.__metadata("design:type", TokenClass_1.TokenClassKey)
], FetchVestingTokenDto.prototype, "tokenClasses", void 0);
exports.FetchVestingTokenDto = FetchVestingTokenDto = tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Fetch vesting info including balances of allocations"
    })
], FetchVestingTokenDto);
let CreateVestingTokenDto = class CreateVestingTokenDto extends dtos_1.SubmitCallDTO {
};
exports.CreateVestingTokenDto = CreateVestingTokenDto;
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "The Token Class to be created with Vesting."
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => token_1.CreateTokenClassDto),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", token_1.CreateTokenClassDto)
], CreateVestingTokenDto.prototype, "tokenClass", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Name for the token holds. This name will be applied to all token holds created."
    }),
    (0, class_validator_1.IsString)(),
    tslib_1.__metadata("design:type", String)
], CreateVestingTokenDto.prototype, "vestingName", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Start date timestamp. Cliff and vesting calculations will use this as the starting point."
    }),
    (0, class_validator_1.Min)(0),
    (0, class_validator_1.IsInt)(),
    tslib_1.__metadata("design:type", Number)
], CreateVestingTokenDto.prototype, "startDate", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Allocations."
    }),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_transformer_1.Type)(() => Allocation),
    (0, class_validator_1.ArrayMinSize)(1),
    (0, class_validator_1.ArrayUnique)(),
    tslib_1.__metadata("design:type", Array)
], CreateVestingTokenDto.prototype, "allocations", void 0);
exports.CreateVestingTokenDto = CreateVestingTokenDto = tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Contains properties of vesting token to be created."
    })
], CreateVestingTokenDto);
//# sourceMappingURL=VestingToken.js.map