"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loan = exports.LoanAgreement = exports.Lender = exports.LoanOffer = exports.LoanClosedBy = exports.LoanStatus = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const class_validator_jsonschema_1 = require("class-validator-jsonschema");
const utils_1 = require("../utils");
const validators_1 = require("../validators");
const ChainObject_1 = require("./ChainObject");
const TokenInstance_1 = require("./TokenInstance");
/*
 * Chain INDEX_KEY naming conventions for Loans:
 * Prefix with "GCTL" for "Gala's Chain Token Loan".
 * Followed by two characters determined by the following rules:
 *  a) If the Class name makes two or more words, the first leter of two of the words as makes sense.
 *  b) If the Class name is a single word, the first and last letters of the word.
 *  c) If there is a comflict with an existing INDEX_KEY, then whatever makes sense.
 */
/*
 * Here, "Any" is set as the first value. First value = 0, which is a falsy value in TypeScript/JavaScript.
 * When Querying by LoanStatus, this avoids the pitfalls of `if (dto.status) {}` failing for "Open".
 * https://github.com/microsoft/TypeScript/issues/7473
 * Retrieved 2022-09-07
 * "I suggest that, as a general practice, enums should always be defined with the
 * 0 value being equivalent to the "Zero Like", "Unspecified", or "Falsy" value for that enum type."
 */
var LoanStatus;
(function (LoanStatus) {
    LoanStatus[LoanStatus["Any"] = 0] = "Any";
    LoanStatus[LoanStatus["Open"] = 1] = "Open";
    LoanStatus[LoanStatus["Contracted"] = 2] = "Contracted";
    LoanStatus[LoanStatus["Fulfilled"] = 3] = "Fulfilled";
    LoanStatus[LoanStatus["Cancelled"] = 4] = "Cancelled";
})(LoanStatus || (exports.LoanStatus = LoanStatus = {}));
var LoanClosedBy;
(function (LoanClosedBy) {
    LoanClosedBy[LoanClosedBy["Unspecified"] = 0] = "Unspecified";
    LoanClosedBy[LoanClosedBy["Owner"] = 1] = "Owner";
    LoanClosedBy[LoanClosedBy["Registrar"] = 2] = "Registrar";
})(LoanClosedBy || (exports.LoanClosedBy = LoanClosedBy = {}));
class LoanOffer extends ChainObject_1.ChainObject {
    tokenKey() {
        const stringKey = `${this.collection}|${this.category}|${this.type}|${this.additionalKey}|` +
            `${this.instance.toFixed()}`;
        return stringKey;
    }
    verifyTokenKey(key) {
        return (this.collection === key.collection &&
            this.category === key.category &&
            this.type === key.type &&
            this.additionalKey === key.additionalKey &&
            this.instance.isEqualTo(key.instance));
    }
    Lender() {
        const lender = new Lender();
        lender.id = this.owner;
        lender.status = LoanStatus.Open;
        lender.offer = this.getCompositeKey();
        lender.collection = this.collection;
        lender.category = this.category;
        lender.type = this.type;
        lender.additionalKey = this.additionalKey;
        lender.instance = this.instance;
        return lender;
    }
}
exports.LoanOffer = LoanOffer;
LoanOffer.INDEX_KEY = "GCTLOR";
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "TokenInstance collection. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 0 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "collection", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "TokenInstance category. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 1 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "category", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "TokenInstance type. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 2 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "type", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "TokenInstance additionalKey. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 3 }),
    (0, class_validator_1.IsDefined)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "additionalKey", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "TokenInstance instance. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 4 }),
    (0, class_validator_1.IsNotEmpty)(),
    (0, validators_1.BigNumberIsInteger)(),
    (0, validators_1.BigNumberIsNotNegative)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], LoanOffer.prototype, "instance", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "Chain identity of the NFT owner that offered the loan. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 5 }),
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "Timestamp tracking when the offer was made. ChainKey property." }),
    (0, utils_1.ChainKey)({ position: 6 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], LoanOffer.prototype, "created", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "ChainKey property. Numeric id to differentiate multiple " +
            "LoanOffers written to chain, at the same time, for the same NFT, such as p2p loans offered " +
            "to a small group of known users."
    }),
    (0, utils_1.ChainKey)({ position: 7 }),
    tslib_1.__metadata("design:type", Number)
], LoanOffer.prototype, "id", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Registrar chain identity. For p2p loans, equal to the " + "Loan.NULL_REGISTRAR_KEY."
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "registrar", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "Optional borrower identity, for loans offered to a specific group of users." }),
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], LoanOffer.prototype, "borrower", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "LoanStatus, e.g. Open, Contracted, Fulfilled, Cancelled." }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], LoanOffer.prototype, "status", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "Optional reward property, available for use by consumer implementations." }),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_transformer_1.Type)(() => TokenInstance_1.TokenInstanceQuantity),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ArrayNotEmpty)(),
    tslib_1.__metadata("design:type", Array)
], LoanOffer.prototype, "reward", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Number of times this offered can be accepted and fulfilled (non-concurrently)"
    }),
    (0, validators_1.BigNumberIsPositive)(),
    (0, validators_1.BigNumberIsInteger)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], LoanOffer.prototype, "uses", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "Number of uses spent." }),
    (0, validators_1.BigNumberIsPositive)(),
    (0, validators_1.BigNumberIsInteger)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], LoanOffer.prototype, "usesSpent", void 0);
tslib_1.__decorate([
    (0, class_validator_1.Min)(0),
    (0, class_validator_1.IsInt)(),
    tslib_1.__metadata("design:type", Number)
], LoanOffer.prototype, "expires", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LoanOffer.prototype, "tokenKey", null);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [TokenInstance_1.TokenInstanceKey]),
    tslib_1.__metadata("design:returntype", Boolean)
], LoanOffer.prototype, "verifyTokenKey", null);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LoanOffer.prototype, "Lender", null);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], LoanOffer, "INDEX_KEY", void 0);
let Lender = class Lender extends ChainObject_1.ChainObject {
    matchesQuery(key) {
        const tokenKeys = key.publicKeyProperties();
        const queryParams = key.toQueryParams();
        for (let i = 0; i < queryParams.length; i++) {
            if (this[tokenKeys[i]] !== queryParams[i]) {
                return false;
            }
        }
        return true;
    }
};
exports.Lender = Lender;
Lender.INDEX_KEY = "GCTLLR";
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "Client identity id for Lender that made the referenced LoanOffer." }),
    (0, utils_1.ChainKey)({ position: 0 }),
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], Lender.prototype, "id", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "LoanStatus. ChainKey Property." }),
    (0, utils_1.ChainKey)({ position: 1 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], Lender.prototype, "status", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({ description: "LoanOffer chain key." }),
    (0, utils_1.ChainKey)({ position: 2 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Lender.prototype, "offer", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Lender.prototype, "collection", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Lender.prototype, "category", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Lender.prototype, "type", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsDefined)(),
    tslib_1.__metadata("design:type", String)
], Lender.prototype, "additionalKey", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, validators_1.BigNumberIsInteger)(),
    (0, validators_1.BigNumberIsNotNegative)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], Lender.prototype, "instance", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [TokenInstance_1.TokenInstanceQueryKey]),
    tslib_1.__metadata("design:returntype", void 0)
], Lender.prototype, "matchesQuery", null);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], Lender, "INDEX_KEY", void 0);
exports.Lender = Lender = tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Lender data written to chain. Lender.offer property can retrieve a " +
            "specific LoanOffer. Useful within chaicnode for queries via " +
            "full or partial key. For example, query by Lender's client identity to retrieve " +
            "all offer IDs made by that Lender."
    })
], Lender);
class LoanAgreement extends ChainObject_1.ChainObject {
}
exports.LoanAgreement = LoanAgreement;
LoanAgreement.INDEX_KEY = "GCTLLA";
LoanAgreement.OBJECT_TYPE = "LoanAgreement";
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 0 }),
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], LoanAgreement.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 1 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], LoanAgreement.prototype, "offer", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 2 }),
    tslib_1.__metadata("design:type", String)
], LoanAgreement.prototype, "loan", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 3 }),
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], LoanAgreement.prototype, "borrower", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 4 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], LoanAgreement.prototype, "created", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], LoanAgreement, "INDEX_KEY", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], LoanAgreement, "OBJECT_TYPE", void 0);
class Loan extends ChainObject_1.ChainObject {
}
exports.Loan = Loan;
Loan.INDEX_KEY = "GCTLLN";
Loan.NULL_REGISTRAR_KEY = "p2p";
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 0 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "registrar", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 1 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "collection", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 2 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "category", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 3 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "type", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 4 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "additionalKey", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 5 }),
    (0, class_validator_1.IsNotEmpty)(),
    (0, validators_1.BigNumberIsInteger)(),
    (0, validators_1.BigNumberIsNotNegative)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], Loan.prototype, "instance", void 0);
tslib_1.__decorate([
    (0, utils_1.ChainKey)({ position: 6 }),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], Loan.prototype, "start", void 0);
tslib_1.__decorate([
    (0, validators_1.IsUserAlias)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], Loan.prototype, "borrower", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], Loan.prototype, "status", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", Number)
], Loan.prototype, "closedBy", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], Loan, "INDEX_KEY", void 0);
tslib_1.__decorate([
    (0, class_transformer_1.Exclude)(),
    tslib_1.__metadata("design:type", Object)
], Loan, "NULL_REGISTRAR_KEY", void 0);
//# sourceMappingURL=Loan.js.map