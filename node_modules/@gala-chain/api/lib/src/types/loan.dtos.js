"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloseLoanDto = exports.FetchLoansDto = exports.FetchLoanOffersDto = exports.AcceptLoanOfferDto = exports.LoanOfferResDto = exports.OfferLoanDto = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const class_validator_jsonschema_1 = require("class-validator-jsonschema");
const validators_1 = require("../validators");
const Loan_1 = require("./Loan");
const TokenInstance_1 = require("./TokenInstance");
const dtos_1 = require("./dtos");
let OfferLoanDto = class OfferLoanDto extends dtos_1.SubmitCallDTO {
};
exports.OfferLoanDto = OfferLoanDto;
OfferLoanDto.DEFAULT_EXPIRES = 0;
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Owner of the NFT offered up for loan. Optional field, by default set to chaincode calling user."
    }),
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUserRef)(),
    tslib_1.__metadata("design:type", String)
], OfferLoanDto.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Third party intermediary granted the authority to coordinate agreements between " +
            "owners and borrowers. If a registrar is not provided, then a borrower must be defined."
    }),
    (0, validators_1.IsDifferentValue)("owner", { message: "registrar should be different than owner." }),
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUserRef)(),
    tslib_1.__metadata("design:type", String)
], OfferLoanDto.prototype, "registrar", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Borrower(s) that will be borrowing, using, or operating the loaned token. " +
            "A loan can be offered directly to specific borrowers to facilitate p2p loans."
    })
    // TODO: this decorator does not currently support comparing each value inside an array
    // @IsDifferentValue("owner", {
    //   message: "borrower(s) should be different than owner."
    // })
    ,
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ArrayUnique)(),
    (0, validators_1.IsUserRef)({ each: true }),
    (0, class_validator_1.ArrayMaxSize)(12, { message: "p2p loan offers are currently limited to 12 per request." }),
    tslib_1.__metadata("design:type", Array)
], OfferLoanDto.prototype, "borrowers", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "The token instance(s) offered up for loan. Partial key queries " +
            "are supported and will grant separate loan offers for each NFT owned by " +
            "the issuer of the loan offer."
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => TokenInstance_1.TokenInstanceQueryKey),
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", TokenInstance_1.TokenInstanceQueryKey)
], OfferLoanDto.prototype, "tokens", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "A reward expected by the owner upon completion of the loan term. " +
            "Optional. Some uses cases may dicate more specific terms or rewards, " +
            "and may instead define terms in another context/channel."
    }),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_transformer_1.Type)(() => TokenInstance_1.TokenInstanceQuantity),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ArrayUnique)(),
    tslib_1.__metadata("design:type", Array)
], OfferLoanDto.prototype, "rewards", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "How many times the loan can filled."
    }),
    (0, validators_1.BigNumberIsPositive)(),
    (0, validators_1.BigNumberIsInteger)(),
    (0, validators_1.BigNumberProperty)(),
    tslib_1.__metadata("design:type", bignumber_js_1.default)
], OfferLoanDto.prototype, "uses", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Unix timestamp of the date when the offer should expire. 0 means that it won't expire. " +
            `By default set to ${0}}.`
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.Min)(0),
    (0, class_validator_1.IsInt)(),
    tslib_1.__metadata("design:type", Number)
], OfferLoanDto.prototype, "expires", void 0);
exports.OfferLoanDto = OfferLoanDto = tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Defines a loan offer. An owner of an NFT can loan their instance(s) " +
            "either directly to another user or via an intermediary (registrar). " +
            "Unlike TokenSwaps, a token Loan involves granting others the authority to Lock and Use an " +
            "NFT, but never transferToken ownership."
    })
], OfferLoanDto);
let LoanOfferResDto = class LoanOfferResDto extends dtos_1.SubmitCallDTO {
};
exports.LoanOfferResDto = LoanOfferResDto;
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "A LoanOffer written to chain."
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => Loan_1.LoanOffer),
    tslib_1.__metadata("design:type", Loan_1.LoanOffer)
], LoanOfferResDto.prototype, "offer", void 0);
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "The Lender data written to chain, corresponding to the created LoanOffer."
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => Loan_1.Lender),
    tslib_1.__metadata("design:type", Loan_1.Lender)
], LoanOfferResDto.prototype, "lender", void 0);
exports.LoanOfferResDto = LoanOfferResDto = tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Response DTO for a successful loan offer (or multiple offers). This object encapsulates a LoanOffer object " +
            "written to chain and its corresponding Lender object written to chain. " +
            "Registrar-mediated loans offered openly will generally have a single offerlender pair. " +
            "p2p loans offered to 1 or more specific users will have multiple results. " +
            "Similarly, a LoanOffer submitted with a partial TokenQueryKey can create multiple offers " +
            "for all of the end user's NFT's that match the query. " +
            "The Lender.offer property contains the chain key for the LoanOffer, which can be used " +
            "to construct an AcceptLoanOfferDto at a later time."
    })
], LoanOfferResDto);
class AcceptLoanOfferDto extends dtos_1.SubmitCallDTO {
}
exports.AcceptLoanOfferDto = AcceptLoanOfferDto;
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], AcceptLoanOfferDto.prototype, "offer", void 0);
tslib_1.__decorate([
    (0, validators_1.IsUserRef)(),
    tslib_1.__metadata("design:type", String)
], AcceptLoanOfferDto.prototype, "borrower", void 0);
tslib_1.__decorate([
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => TokenInstance_1.TokenInstanceKey),
    tslib_1.__metadata("design:type", TokenInstance_1.TokenInstanceKey)
], AcceptLoanOfferDto.prototype, "token", void 0);
class FetchLoanOffersDto extends dtos_1.ChainCallDTO {
}
exports.FetchLoanOffersDto = FetchLoanOffersDto;
tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Partial or complete token instance query key to return offers for one or more NFTs."
    }),
    (0, class_validator_1.ValidateNested)(),
    (0, class_transformer_1.Type)(() => TokenInstance_1.TokenInstanceQueryKey),
    (0, class_validator_1.IsOptional)(),
    tslib_1.__metadata("design:type", TokenInstance_1.TokenInstanceQueryKey)
], FetchLoanOffersDto.prototype, "tokenQuery", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUserRef)(),
    tslib_1.__metadata("design:type", String)
], FetchLoanOffersDto.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNotEmpty)(),
    (0, validators_1.EnumProperty)(Loan_1.LoanStatus),
    tslib_1.__metadata("design:type", Number)
], FetchLoanOffersDto.prototype, "status", void 0);
let FetchLoansDto = class FetchLoansDto extends dtos_1.ChainCallDTO {
};
exports.FetchLoansDto = FetchLoansDto;
tslib_1.__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUserRef)(),
    tslib_1.__metadata("design:type", String)
], FetchLoansDto.prototype, "registrar", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.IsUserRef)(),
    tslib_1.__metadata("design:type", String)
], FetchLoansDto.prototype, "owner", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, validators_1.EnumProperty)(Loan_1.LoanStatus),
    tslib_1.__metadata("design:type", Number)
], FetchLoansDto.prototype, "status", void 0);
exports.FetchLoansDto = FetchLoansDto = tslib_1.__decorate([
    (0, class_validator_jsonschema_1.JSONSchema)({
        description: "Fetch Loans off chain, either by providing an owner key and/or a registrary identity key. " +
            "Optionally, filter by status. If neither owner nor registrary are provided, results set will be empty."
    })
], FetchLoansDto);
class CloseLoanDto extends dtos_1.SubmitCallDTO {
}
exports.CloseLoanDto = CloseLoanDto;
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    tslib_1.__metadata("design:type", String)
], CloseLoanDto.prototype, "loan", void 0);
tslib_1.__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, validators_1.EnumProperty)(Loan_1.LoanStatus),
    tslib_1.__metadata("design:type", Number)
], CloseLoanDto.prototype, "status", void 0);
//# sourceMappingURL=loan.dtos.js.map