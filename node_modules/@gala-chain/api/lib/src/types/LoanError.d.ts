import { ConflictError, ForbiddenError, NotFoundError, NotImplementedError, ValidationFailedError } from "../utils";
import { LoanStatus } from "./Loan";
export declare class InvalidClosingStatusError extends ForbiddenError {
    constructor(closingStatus: LoanStatus);
}
export declare class LoanAlreadyClosedError extends ConflictError {
    constructor(loanKey: string, status: string);
}
export declare class LoanCloseForbiddenUserError extends ForbiddenError {
    constructor(callingUser: string, loanKey: string, owner: string, registrar: string);
}
export declare class MissingLoanError extends NotFoundError {
    constructor(user: string, loanKey: string);
}
export declare class OfferLoanOwnerCallerMismatchError extends ForbiddenError {
    constructor(callingUser: string, owner: string);
}
export declare class OfferLoanFungibleTokenNotImplementedError extends NotImplementedError {
    constructor(tokenQueryKey: string);
}
export declare class InvalidTokenKeyError extends ValidationFailedError {
    constructor(tokenKey: string, borrower: string);
}
export declare class OfferBorrowerMismatchError extends ValidationFailedError {
    constructor(borrower: string, offerBorrower: string, tokenKey: string);
}
export declare class MultipleTokenBalancesError extends ForbiddenError {
    constructor(owner: string, completeKey: string);
}
export declare class MissingInstanceBalanceError extends NotFoundError {
    constructor(owner: string, completeKey: string);
}
export declare class ExclusiveRegistrarBorrowersError extends ConflictError {
    constructor(registrar: string, borrowers: string[]);
}
export declare class UserMustBeRegistrarError extends ForbiddenError {
    constructor(registrar: string, callingUser: string, tokenKey: string, borrower: string);
}
export declare class OfferUnavailableError extends ForbiddenError {
    constructor(status: LoanStatus, tokenKey: string, borrower: string);
}
export declare class ExpiredOfferError extends ForbiddenError {
    constructor(expires: number, acceptanceTime: number, tokenKey: string, borrower: string);
}
//# sourceMappingURL=LoanError.d.ts.map