import BigNumber from "bignumber.js";
import { ValidationFailedError } from "../utils";
import { ChainObject } from "./ChainObject";
import { TokenClassKey } from "./TokenClass";
import { UserAlias } from "./UserAlias";
import { UserRef } from "./UserRef";
import { ChainCallDTO, SubmitCallDTO } from "./dtos";
export declare class TokenSaleQuantity {
    tokenClassKey: TokenClassKey;
    quantity: BigNumber;
}
export declare class TokenSale extends ChainObject {
    created: number;
    txid: string;
    tokenSaleId: string;
    selling: Array<TokenSaleQuantity>;
    cost: Array<TokenSaleQuantity>;
    owner: UserAlias;
    fulfillmentIds: Array<string>;
    quantity: BigNumber;
    quantityFulfilled: BigNumber;
    end: number;
    start: number;
    static INDEX_KEY: string;
}
export declare class TokenSaleTokenSold extends ChainObject {
    static INDEX_KEY: string;
    collection: string;
    category: string;
    type: string;
    additionalKey: string;
    quantity: string;
    tokenSaleId: string;
}
export declare class TokenSaleTokenCost extends ChainObject {
    static INDEX_KEY: string;
    collection: string;
    category: string;
    type: string;
    additionalKey: string;
    quantity: string;
    tokenSaleId: string;
}
export declare class TokenSaleOwner extends ChainObject {
    static INDEX_KEY: string;
    owner: UserAlias;
    tokenSaleId: string;
}
export declare class TokenSaleMintAllowance extends ChainObject {
    static INDEX_KEY: string;
    tokenSaleId: string;
    collection: string;
    category: string;
    type: string;
    additionalKey: string;
    quantity: BigNumber;
    allowanceObjectKey: string;
}
export declare class TokenSaleFulfillment extends ChainObject {
    static INDEX_KEY: string;
    tokenSaleId: string;
    fulfilledBy: UserAlias;
    created: number;
    quantity: BigNumber;
}
export declare class CreateTokenSaleDto extends SubmitCallDTO {
    static DEFAULT_END: number;
    static DEFAULT_START: number;
    owner?: UserRef;
    selling: Array<TokenSaleQuantity>;
    cost: Array<TokenSaleQuantity>;
    quantity: BigNumber;
    end?: number;
    start?: number;
}
export declare class ExpectedTokenSale {
    selling: Array<TokenSaleQuantity>;
    cost: Array<TokenSaleQuantity>;
}
export declare class FulfillTokenSaleDto extends SubmitCallDTO {
    tokenSaleId: string;
    expectedTokenSale?: ExpectedTokenSale;
    fulfilledBy?: UserRef;
    quantity: BigNumber;
}
export declare class RemoveTokenSaleDto extends SubmitCallDTO {
    readonly tokenSaleId: string;
}
export declare class FetchTokenSalesWithPaginationDto extends ChainCallDTO {
    static readonly MAX_LIMIT: number;
    static readonly DEFAULT_LIMIT = 1000;
    owner?: UserRef;
    bookmark?: string;
    limit?: number;
}
export declare class FetchTokenSalesWithPaginationResponse extends ChainCallDTO {
    nextPageBookmark?: string | undefined;
    results: TokenSale[];
}
export declare class FetchTokenSaleByIdDto extends ChainCallDTO {
    tokenSaleId: string;
}
export declare class EnsureTokenSaleIndexingDto extends ChainCallDTO {
    tokenSaleIds: string[];
}
export declare class EnsureTokenSaleIndexingResponse extends ChainCallDTO {
    noOp: boolean;
    writes: ChainObject[];
}
export declare class TokenSaleDtoValidationError extends ValidationFailedError {
    constructor(dtoName: string, errors: string[]);
}
export declare class TokenSaleFailedError extends ValidationFailedError {
    constructor(message: string, payload: Record<string, unknown> | undefined);
}
//# sourceMappingURL=sale.d.ts.map