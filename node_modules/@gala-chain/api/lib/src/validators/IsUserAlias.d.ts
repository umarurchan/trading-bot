import { ValidationOptions } from "class-validator";
import { UserAlias } from "../types";
export declare enum UserAliasValidationResult {
    VALID_USER_ALIAS = 0,
    VALID_SYSTEM_USER = 1,
    INVALID_ETH_USER_ALIAS = 2,
    INVALID_TON_USER_ALIAS = 3,
    INVALID_FORMAT = 4
}
export declare function meansValidUserAlias(result: UserAliasValidationResult): boolean;
export declare function isValidSystemUser(value: string): boolean;
/**
 * @description
 *
 * Validates a provided user alias. As of 2024-10, The following alias types
 * are supported: legacy client| and service| prefixed aliases,
 * eth| and ton| prefixed addresses, and internally reserved identities.
 *
 * @param value
 * @returns UserRefValidationResult
 */
export declare function validateUserAlias(value: unknown): UserAliasValidationResult;
export declare function isValidUserAlias(value: unknown): value is UserAlias;
/**
 * @description
 *
 * Used to register a decorator for class validation.
 * Validates against IsUserAliasConstraint.
 * See also IsUserAliasConstraint, validateUserAlias.
 * As of 2024-10, The following alias types
 * are supported: legacy client| and service| prefixed aliases,
 * eth| and ton| prefixed addresses, and internally reserved identities.
 *
 * @param options
 *
 */
export declare function IsUserAlias(options?: ValidationOptions): (object: object, propertyName: string) => void;
//# sourceMappingURL=IsUserAlias.d.ts.map