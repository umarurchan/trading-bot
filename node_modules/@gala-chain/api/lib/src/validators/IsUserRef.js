"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsUserRef = exports.validateUserRef = exports.meansValidUserRef = exports.UserRefValidationResult = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const class_validator_1 = require("class-validator");
const utils_1 = require("../utils");
const IsUserAlias_1 = require("./IsUserAlias");
var UserRefValidationResult;
(function (UserRefValidationResult) {
    UserRefValidationResult[UserRefValidationResult["VALID_USER_ALIAS"] = 0] = "VALID_USER_ALIAS";
    UserRefValidationResult[UserRefValidationResult["VALID_SYSTEM_USER"] = 1] = "VALID_SYSTEM_USER";
    UserRefValidationResult[UserRefValidationResult["VALID_ETH_ADDRESS"] = 2] = "VALID_ETH_ADDRESS";
    UserRefValidationResult[UserRefValidationResult["INVALID_ETH_USER_ALIAS"] = 3] = "INVALID_ETH_USER_ALIAS";
    UserRefValidationResult[UserRefValidationResult["INVALID_TON_USER_ALIAS"] = 4] = "INVALID_TON_USER_ALIAS";
    UserRefValidationResult[UserRefValidationResult["INVALID_FORMAT"] = 5] = "INVALID_FORMAT";
})(UserRefValidationResult || (exports.UserRefValidationResult = UserRefValidationResult = {}));
function meansValidUserRef(result) {
    return (result === UserRefValidationResult.VALID_USER_ALIAS ||
        result === UserRefValidationResult.VALID_SYSTEM_USER ||
        result === UserRefValidationResult.VALID_ETH_ADDRESS);
}
exports.meansValidUserRef = meansValidUserRef;
const userAliasValidationResultMapping = {
    [IsUserAlias_1.UserAliasValidationResult.VALID_USER_ALIAS]: UserRefValidationResult.VALID_USER_ALIAS,
    [IsUserAlias_1.UserAliasValidationResult.VALID_SYSTEM_USER]: UserRefValidationResult.VALID_SYSTEM_USER,
    [IsUserAlias_1.UserAliasValidationResult.INVALID_ETH_USER_ALIAS]: UserRefValidationResult.INVALID_ETH_USER_ALIAS,
    [IsUserAlias_1.UserAliasValidationResult.INVALID_TON_USER_ALIAS]: UserRefValidationResult.INVALID_TON_USER_ALIAS
};
function validateUserRef(value) {
    if (typeof value !== "string" || value.length === 0) {
        return UserRefValidationResult.INVALID_FORMAT;
    }
    // check if the value contains a valid user alias
    const userAliasValidationResult = userAliasValidationResultMapping[(0, IsUserAlias_1.validateUserAlias)(value)];
    if (userAliasValidationResult !== undefined) {
        return userAliasValidationResult;
    }
    // check if this is a valid Ethereum address
    if (utils_1.signatures.isChecksumedEthAddress(value) || utils_1.signatures.isLowercasedEthAddress(value)) {
        return UserRefValidationResult.VALID_ETH_ADDRESS;
    }
    return UserRefValidationResult.INVALID_FORMAT;
}
exports.validateUserRef = validateUserRef;
const customMessages = {
    [UserRefValidationResult.INVALID_ETH_USER_ALIAS]: "User ref starting with 'eth|' must end with valid checksumed eth address without 0x prefix.",
    [UserRefValidationResult.INVALID_TON_USER_ALIAS]: "User ref starting with 'ton|' must end with valid bounceable base64 TON address."
};
const genericMessage = "Expected a valid user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', " +
    "or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.";
let IsUserRefConstraint = class IsUserRefConstraint {
    validate(value, args) {
        if (Array.isArray(value)) {
            return value.every((val) => this.validate(val, args));
        }
        const result = validateUserRef(value);
        return meansValidUserRef(result);
    }
    defaultMessage(args) {
        var _a;
        const value = args.value;
        if (Array.isArray(value)) {
            const invalidValues = value.filter((val) => !meansValidUserRef(validateUserRef(val)));
            return `${args.property} property with values ${invalidValues} are not valid GalaChain user ref. ${genericMessage}`;
        }
        const result = validateUserRef(args.value);
        const details = (_a = customMessages[result]) !== null && _a !== void 0 ? _a : genericMessage;
        return `${args.property} property with value ${args.value} is not a valid GalaChain user ref. ${details}`;
    }
};
IsUserRefConstraint = tslib_1.__decorate([
    (0, class_validator_1.ValidatorConstraint)({ async: false })
], IsUserRefConstraint);
function IsUserRef(options) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: "isUserRef",
            target: object.constructor,
            propertyName,
            options,
            constraints: [],
            validator: IsUserRefConstraint
        });
    };
}
exports.IsUserRef = IsUserRef;
//# sourceMappingURL=IsUserRef.js.map