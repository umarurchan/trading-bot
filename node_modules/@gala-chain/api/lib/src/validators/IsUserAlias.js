"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsUserAlias = exports.isValidUserAlias = exports.validateUserAlias = exports.isValidSystemUser = exports.meansValidUserAlias = exports.UserAliasValidationResult = void 0;
const tslib_1 = require("tslib");
/*
 * Copyright (c) Gala Games Inc. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const class_validator_1 = require("class-validator");
const utils_1 = require("../utils");
var UserAliasValidationResult;
(function (UserAliasValidationResult) {
    UserAliasValidationResult[UserAliasValidationResult["VALID_USER_ALIAS"] = 0] = "VALID_USER_ALIAS";
    UserAliasValidationResult[UserAliasValidationResult["VALID_SYSTEM_USER"] = 1] = "VALID_SYSTEM_USER";
    UserAliasValidationResult[UserAliasValidationResult["INVALID_ETH_USER_ALIAS"] = 2] = "INVALID_ETH_USER_ALIAS";
    UserAliasValidationResult[UserAliasValidationResult["INVALID_TON_USER_ALIAS"] = 3] = "INVALID_TON_USER_ALIAS";
    UserAliasValidationResult[UserAliasValidationResult["INVALID_FORMAT"] = 4] = "INVALID_FORMAT";
})(UserAliasValidationResult || (exports.UserAliasValidationResult = UserAliasValidationResult = {}));
function meansValidUserAlias(result) {
    return (result === UserAliasValidationResult.VALID_USER_ALIAS ||
        result === UserAliasValidationResult.VALID_SYSTEM_USER);
}
exports.meansValidUserAlias = meansValidUserAlias;
function isValidSystemUser(value) {
    return (value === "EthereumBridge" ||
        value === "TonBridge" ||
        value === "SolanaBridge" ||
        /^GalaChainBridge-\d+$/.test(value));
}
exports.isValidSystemUser = isValidSystemUser;
/**
 * @description
 *
 * Validates a provided user alias. As of 2024-10, The following alias types
 * are supported: legacy client| and service| prefixed aliases,
 * eth| and ton| prefixed addresses, and internally reserved identities.
 *
 * @param value
 * @returns UserRefValidationResult
 */
function validateUserAlias(value) {
    if (typeof value !== "string" || value.length === 0) {
        return UserAliasValidationResult.INVALID_FORMAT;
    }
    const parts = value.split("|");
    if (parts.length === 1) {
        if (isValidSystemUser(parts[0])) {
            return UserAliasValidationResult.VALID_SYSTEM_USER;
        }
        else {
            return UserAliasValidationResult.INVALID_FORMAT;
        }
    }
    if (parts.length === 2) {
        if ((parts[0] === "client" || parts[0] === "service") && parts[1].length > 0) {
            return UserAliasValidationResult.VALID_USER_ALIAS;
        }
        if (parts[0] === "eth") {
            if (utils_1.signatures.isChecksumedEthAddress(parts[1]) && !parts[1].startsWith("0x")) {
                return UserAliasValidationResult.VALID_USER_ALIAS;
            }
            else {
                return UserAliasValidationResult.INVALID_ETH_USER_ALIAS;
            }
        }
        if (parts[0] === "ton") {
            if (utils_1.signatures.ton.isValidTonAddress(parts[1])) {
                return UserAliasValidationResult.VALID_USER_ALIAS;
            }
            else {
                return UserAliasValidationResult.INVALID_TON_USER_ALIAS;
            }
        }
    }
    return UserAliasValidationResult.INVALID_FORMAT;
}
exports.validateUserAlias = validateUserAlias;
function isValidUserAlias(value) {
    const result = validateUserAlias(value);
    return meansValidUserAlias(result);
}
exports.isValidUserAlias = isValidUserAlias;
const customMessages = {
    [UserAliasValidationResult.INVALID_ETH_USER_ALIAS]: "User alias starting with 'eth|' must end with valid checksumed eth address without 0x prefix.",
    [UserAliasValidationResult.INVALID_TON_USER_ALIAS]: "User alias starting with 'ton|' must end with valid bounceable base64 TON address."
};
const genericMessage = "Expected string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', " +
    "or 'ton|<chain:ton-address>', or valid system-level username.";
let IsUserAliasConstraint = class IsUserAliasConstraint {
    validate(value, args) {
        if (Array.isArray(value)) {
            return value.every((val) => this.validate(val, args));
        }
        const result = validateUserAlias(value);
        return meansValidUserAlias(result);
    }
    defaultMessage(args) {
        var _a;
        const value = args.value;
        if (Array.isArray(value)) {
            const invalidValues = value.filter((val) => !meansValidUserAlias(validateUserAlias(val)));
            return `${args.property} property with values ${invalidValues} are not valid GalaChain user aliases. ${genericMessage}`;
        }
        const result = validateUserAlias(args.value);
        const details = (_a = customMessages[result]) !== null && _a !== void 0 ? _a : genericMessage;
        return `${args.property} property with value ${args.value} is not a valid GalaChain user alias. ${details}`;
    }
};
IsUserAliasConstraint = tslib_1.__decorate([
    (0, class_validator_1.ValidatorConstraint)({ async: false })
], IsUserAliasConstraint);
/**
 * @description
 *
 * Used to register a decorator for class validation.
 * Validates against IsUserAliasConstraint.
 * See also IsUserAliasConstraint, validateUserAlias.
 * As of 2024-10, The following alias types
 * are supported: legacy client| and service| prefixed aliases,
 * eth| and ton| prefixed addresses, and internally reserved identities.
 *
 * @param options
 *
 */
function IsUserAlias(options) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: "isUserAlias",
            target: object.constructor,
            propertyName,
            options,
            constraints: [],
            validator: IsUserAliasConstraint
        });
    };
}
exports.IsUserAlias = IsUserAlias;
//# sourceMappingURL=IsUserAlias.js.map