"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainUser = void 0;
const utils_1 = require("../../utils");
/**
 * Represents a user configuration object, containing all the information
 * needed to authenticate and sign transactions.
 *
 * @class ChainUser
 */
class ChainUser {
    /**
     * @param {Object} config - Configuration object for the constructor.
     *
     * @param {string} [config.name] - If provided, the resulting prefix will be
     * `client` and identityKey will be `client|${name}`. Otherwise, the prefix
     * will be `eth` and identityKey will be `eth|${ethAddress}`.
     *
     * @param {string} config.privateKey - A secp256k1 private key to be used for
     * cryptographic operations. It will be used to calculate the public key and
     * the ethAddress, and will be used to sign transactions.
     */
    constructor(config) {
        this.privateKey = config.privateKey;
        this.publicKey = utils_1.signatures.getPublicKey(config.privateKey);
        this.ethAddress = utils_1.signatures.getEthAddress(this.publicKey);
        if (config.name === undefined) {
            this.prefix = "eth";
            this.name = this.ethAddress;
        }
        else {
            this.prefix = "client";
            this.name = config.name.replace("client|", "");
        }
        this.identityKey = `${this.prefix}|${this.name}`; // safe to cast it
    }
    /**
     * Generates a new ChainUser object with random keys.
     *
     * @param {string} [name] - The name to be used for the ChainUser.
     * If provided, the resulting identityKey will be `client|${name}`.
     * Otherwise, the identityKey will be `eth|${ethAddress}`.
     *
     * @return {ChainUser} - A new ChainUser object with the generated
     * random keys and the provided or default name.
     */
    static withRandomKeys(name) {
        return new ChainUser({ ...utils_1.signatures.genKeyPair(), name });
    }
}
exports.ChainUser = ChainUser;
//# sourceMappingURL=ChainUser.js.map